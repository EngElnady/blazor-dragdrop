@using System.Diagnostics;

    <div ondragover="event.preventDefault();" ondragenter="event.preventDefault();" ondragstart="event.dataTransfer.setData('text', event.target.id);" @ondrop="Ondrop" class="@_DropzoneClass">
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
        @{
            if (DragDropService.HasDraggablesForDropzone(_dropzoneId))
            {
                @if (DragDropService.EnableDebug)
                {
                    <p>render draggable(s) inside dropzone @_dropzoneId</p>
                }

                foreach (var frag in DragDropService.GetDraggablesForDropzone(_dropzoneId))
                {
                    if (AllowDrag(frag.Id)) // allow dragging
                    {
                        <div @key="frag" draggable="true" @ondragstart="()=>OnDragStart(frag.Id)"
                             @ondragenter="(e)=>OnDragEnter(frag.Id,e)"
                             @ondragleave="(e)=>OnDragLeave(frag.Id,e)"
                             @ondragend="() =>OnDragEnd(frag.Id)"
                             class=@GetClasses(frag.Id)>
                            @if (DragDropService.EnableDebug)
                            {
                                <p>@frag.Id</p>
                            }
                            <div class="@GetNoPointerClass(frag.Id)">
                                <CascadingValue Value="frag">
                                    @frag.RenderFragement(frag)
                                </CascadingValue>
                            </div>
                        </div>
                    }
                    else // not allowing dragging
                    {
                        <div class=@GetClasses(frag.Id)>
                            <CascadingValue Value="frag">
                                @frag.RenderFragement(frag)
                            </CascadingValue>
                        </div>
                    }
                }
            }
        }

    </div>


@code {

    private int _dropzoneId { get; set; }

    private int _currentDraggedOverId;

    [Inject]
    private DragDropServiceFactory _dragDropServiceFactory { get; set; }

    private DragDropService DragDropService => _dragDropServiceFactory.Get();

    /// <summary>
    /// Maximum Number of items which can be dropped in this dropzone. Defaults to null which means unlimited.
    /// </summary>
    [Parameter]
    public int? MaxItems { get; set; }

    /// <summary>
    /// Indicates if dropzone item can be swapped with an item from another dropzone once MaxItem has been reached.
    /// </summary>
    [Parameter]
    public bool AllowSwap { get; set; }


    /// <summary>
    /// Allows to pass a delegate which executes if something is dropped and decides if the item is accepted
    /// </summary>
    [Parameter]
    public Func<dynamic, bool> Accepts { get; set; }


    /// <summary>
    /// Gets or set css parameters for this component
    /// </summary>
    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public RenderFragment ChildContent { get; set; }


    public int Id { get => _dropzoneId; }


    /// <summary>
    /// Registers a new draggable item for this dropzone
    /// </summary>
    public void RegisterDraggable(DraggableItem dataItem)
    {
        dataItem.DropzoneId = _dropzoneId;

        DragDropService.RegisterDraggableForDropzone(dataItem);
    }

    /// <summary>
    /// Get all draggable items for this dropzone
    /// </summary>
    /// <returns>List of Draggable Items</returns>
    public List<DraggableItem> GetDraggables()
    {
        return DragDropService.GetDraggablesForDropzone(_dropzoneId);
    }


    private string fixedDropzoneClass = "dropzone";

    private string _DropzoneClass
    {
        get
        {
            return $"{fixedDropzoneClass} {Class}";
        }
    }

    private bool AllowDrag(int draggableId)
    {
        var draggedItem = DragDropService.GetDraggablesForDropzone(_dropzoneId).Single(x => x.Id == draggableId);

        if(draggedItem.AllowDrag != null)
        {
            return draggedItem.AllowDrag(draggedItem);
        }
        else
        {
            return true;
        }

    }


    private string GetNoPointerClass(int draggableId)
    {
        if (_currentDraggedOverId == draggableId)
        {
            return "dd-no-pointer-events";
        }
        else
        {
            return string.Empty;
        }
    }

    private string GetClasses(int draggableId)
    {
        if (DragDropService.ActiveItem?.Id == draggableId)
        {
            return $"draggable draggable-intransit";
        }

        if (draggableId == _currentDraggedOverId)
        {
            return $"draggable draggable-over";
        }

        if (!AllowDrag(draggableId))
        {
            return $"draggable draggable-disabled";
        }

        return "draggable";
    }

    private void OnDragStart(int draggableId)
    {

        var dragedItem = DragDropService.GetDraggablesForDropzone(_dropzoneId).Single(x=> x.Id == draggableId);

        if (dragedItem.AllowDrag != null && !dragedItem.AllowDrag(dragedItem.Tag)) return;

        DragDropService.SupressRendering = true;

        DragDropService.SetActiveItem(_dropzoneId, draggableId);

        Debug.WriteLine($"{draggableId} is in transit");
    }

    private void OnDragEnd(int draggableId)
    {

        DragDropService.ActiveItem = null;

        DragDropService.SupressRendering = false;

        Debug.WriteLine($"{draggableId} not in transit anymore");

    }

    private void OnDragLeave(int draggedOverId, DragEventArgs e)
    {
        if (draggedOverId == _currentDraggedOverId)
        {
            _currentDraggedOverId = 0;
        }
    }

    private void OnDragEnter(int draggedOverId, DragEventArgs e)
    {
        Debug.WriteLine($"OnDragEnter raised  by element with id {draggedOverId} - X: {e.ScreenX} Y: {e.ScreenY}");

        //no active item - probably something was dragged is not a draggable 
        if (DragDropService.ActiveItem == null) return;

        //if same item return
        if (draggedOverId == DragDropService.ActiveItem.Id) return;

        _currentDraggedOverId = draggedOverId;

        DragDropService.SwapOrInsert(draggedOverId);

    }

    protected override void OnInitialized()
    {
        _dropzoneId = DragDropService.GetDropzoneId();

        var options = new DropzoneOptions()
        {
            Accepts = Accepts,
            MaxItems = MaxItems,
            AllowSwap = AllowSwap
        };

        DragDropService.RegisterDropzone(_dropzoneId, options);

        DragDropService.StateHasChanged += async () =>
        {
            await InvokeAsync(() => StateHasChanged());
        };
    }

    private void Ondrop()
    {
        _currentDraggedOverId = 0;
        
        //no active item - probably something was dragged is not a draggable 
        if (DragDropService.ActiveItem == null) return;

        DragDropService.DropActiveItem(_dropzoneId);
    }


    protected override bool ShouldRender()
    {
        Debug.WriteLine($"Should Render {!DragDropService.SupressRendering} ActiveItem: {DragDropService.ActiveItem?.Id}");

        return !DragDropService.SupressRendering;
    }

}
