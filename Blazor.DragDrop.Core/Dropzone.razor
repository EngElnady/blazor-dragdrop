
@using System.Diagnostics;


<div ondragover="event.preventDefault();"  ondragenter="event.preventDefault();" ondragstart="event.dataTransfer.setData('text', event.target.id);" @ondrop="Ondrop" class="dropzone">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
    @{
        if (DragDropService.HasDraggablesForDropzone(_dropzoneId))
        {
            @if (DragDropService.EnableDebug)
            {
                <p>render draggable(s) inside dropzone @_dropzoneId</p>
            }

            foreach (var frag in DragDropService.GetDraggablesForDropzone(_dropzoneId))
            {
                <div draggable="true" @ondragstart="()=>OnDragStart(frag.Id)"
                     @ondragenter="(e)=>OnDragEnter(frag.Id,e)"
                     @ondragend="() =>OnDragEnd(frag.Id)"
                     class=@GetClasses(frag.Id)>
                    @if (DragDropService.EnableDebug)
                    {
                    <p>@frag.Id</p>
                    }
                    @frag.RenderFragement
                </div>
            }
        }
    }

</div>


@code {


    [Inject]
    public DragDropServiceFactory DragDropServiceFactory { get; set; }

    public DragDropService DragDropService => DragDropServiceFactory.Get();

    [Parameter]
    public int? MaxItems { get; set; }

    [Parameter]
    public Func<dynamic,bool> Accepts { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private int _dropzoneId { get; set; }

    private string GetClasses(int draggableId)
    {
        if (DragDropService.ActiveItem?.Id == draggableId)
        {
            return $"draggable{draggableId} draggable-intransit";
        }

        return "draggable" + draggableId;
    }

    private void OnDragStart(int draggableId)
    {

        DragDropService.SupressRendering = true;

        DragDropService.SetActiveItem(_dropzoneId, draggableId);

        Debug.WriteLine($"{draggableId} is in transit");
    }

    private void OnDragEnd(int draggableId)
    {
        DragDropService.SupressRendering = false;

        DragDropService.ActiveItem = null;

        Debug.WriteLine($"{draggableId} not in transit anymore");

    }


    private bool IsWithin(double value, double minimum, double maximum)
    {
        return value >= minimum && value <= maximum;
    }


    private int _oldDraggedOverId;
    private double _oldY;
    private string _oldDirection;

    private void OnDragEnter(int draggedOverId, DragEventArgs e)
    {
        Debug.WriteLine($"OnDragEnter raised  by element with id {draggedOverId} - X: {e.ScreenX} Y: {e.ScreenY}");

        //if same item return
        if (draggedOverId == DragDropService.ActiveItem.Id) return;

        //if same id raising event - ignore it
        if (draggedOverId == _oldDraggedOverId)
        {
            if(_oldY < e.ScreenY)
            {
                Debug.WriteLine($"Moving Down! OldDirection: {_oldDirection} OldX: {_oldY}, CurX: {e.ScreenY}");

                if(_oldDirection == "up")
                {
                    Debug.WriteLine($"DirectionChanged");
                    _oldDraggedOverId = 0;
                }

                _oldDirection = "down";
                
            }
            else
            {
                Debug.WriteLine($"Moving Up! OldDirection: {_oldDirection} OldX: {_oldY}, CurX: {e.ScreenY}");

                if(_oldDirection == "down")
                {
                    Debug.WriteLine($"DirectionChanged");
                    _oldDraggedOverId = 0;
                }

                _oldDirection = "up";
            }


            _oldY = e.ScreenY;
            return;
        }

        _oldDraggedOverId = draggedOverId;
        _oldY = e.ScreenX;

        DragDropService.SwapOrInsert(draggedOverId);

    }

    protected override void OnInitialized()
    {
        _dropzoneId = DragDropService.GetDropzoneId();

        var options = new DropzoneOptions()
        {
            Accepts = Accepts,
            MaxItems = MaxItems
        };

        DragDropService.RegisterDropzone(_dropzoneId, options);

        DragDropService.StateHasChanged += async () =>
        {
            await InvokeAsync(() => StateHasChanged());
        };
    }

    private void Ondrop()
    {
        _oldDraggedOverId = 0;

        DragDropService.DropActiveItem(_dropzoneId);
    }

    public void RegisterDraggable(DraggableItem dataItem)
    {
        dataItem.DropzoneId = _dropzoneId;

        DragDropService.RegisterDraggableForDropzone(dataItem);
    }

    protected override bool ShouldRender()
    {
        Debug.WriteLine($"Should Render {!DragDropService.SupressRendering} ActiveItem: {DragDropService.ActiveItem?.Id}");

        return !DragDropService.SupressRendering;
    }

}
