@inject DragDropService DragDropService;
@using System.Diagnostics;


<div ondragover="event.preventDefault();"  ondragenter="event.preventDefault();" ondragstart="event.dataTransfer.setData('text', event.target.id);" @ondrop="Ondrop" class="dropzone">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
    @{
        if (DragDropService.HasDraggablesForDropzone(_dropzoneId))
        {
            @if (DragDropService.EnableDebug)
            {
                <p>render draggable(s) inside dropzone @_dropzoneId</p>
            }

            foreach (var frag in DragDropService.GetDraggablesForDropzone(_dropzoneId))
            {
                <div draggable="true" @ondragstart="()=>OnDragStart(frag.Id)"
                     @ondragenter="()=>OnDragEnter(frag.Id)"
                     @ondragend="() =>OnDragEnd(frag.Id)"
                     class=@GetClasses(frag.Id)>
                    @if (DragDropService.EnableDebug)
                    {
                    <p>@frag.Id</p>
                    }
                    @frag.RenderFragement
                </div>
            }
        }
    }

</div>


@code {


    [Parameter]
    public int? MaxItems { get; set; }

    [Parameter]
    public Func<dynamic,bool> Accepts { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private int _dropzoneId { get; set; }

    private string GetClasses(int draggableId)
    {
        if (DragDropService.ActiveItem?.Id == draggableId)
        {
            return $"draggable{draggableId} draggable-intransit";
        }

        return "draggable" + draggableId;
    }

    private void OnDragStart(int draggableId)
    {

        DragDropService.SupressRendering = true;

        DragDropService.SetActiveItem(_dropzoneId, draggableId);

        Debug.WriteLine($"{draggableId} is in transit");
    }

    private void OnDragEnd(int draggableId)
    {
        DragDropService.SupressRendering = false;

        DragDropService.ActiveItem = null;

        Debug.WriteLine($"{draggableId} not in transit anymore");

    }


    private void OnDragEnter(int draggableId)
    {
        //Debug.WriteLine($"OnDragEnter {draggableId}");

        //if same item return
        if (draggableId == DragDropService.ActiveItem.Id) return;


        DragDropService.SwapOrInsert(draggableId);

    }

    protected override void OnInitialized()
    {
        _dropzoneId = DragDropService.GetDropzoneId();

        var options = new DropzoneOptions()
        {
            Accepts = Accepts,
            MaxItems = MaxItems
        };

        DragDropService.RegisterDropzone(_dropzoneId, options);

        DragDropService.StateHasChanged += async () =>
        {
            await InvokeAsync(() => StateHasChanged());
        };
    }

    private void Ondrop()
    {
        DragDropService.DropActiveItem(_dropzoneId);
    }

    public void RegisterDraggable(DraggableItem dataItem)
    {
        dataItem.DropzoneId = _dropzoneId;

        DragDropService.RegisterDraggableForDropzone(dataItem);
    }

    protected override bool ShouldRender()
    {
        //Debug.WriteLine($"Should Render {!DragDropService.SupressRendering} ActiveItem: {DragDropService.ActiveItem}");

        return !DragDropService.SupressRendering;
    }

}
