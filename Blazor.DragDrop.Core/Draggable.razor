@using System.Diagnostics

@code {

    [Inject]
    public DragDropServiceFactory DragDropServiceFactory { get; set; }

    public DragDropService DragDropService => DragDropServiceFactory.Get();

    private int _id { get; set; }

    private bool _IsInTransit;

    protected override void OnInitialized()
    {

        if (Dropzone == null) throw new InvalidOperationException("Draggables must be inside a dropzone. Put a <dropzone> </dropzone> tag around them.");

        _id = DragDropService.GetDraggableId();

        var dataItem = new DraggableItem(DragDropService)
        { 
            Id = _id,
            RenderFragement = ChildContent,
            Tag = Tag,
            AllowDrag = AllowDrag,
            Name = Name
        };

        Dropzone.RegisterDraggable(dataItem);

        DragDropService.StateHasChanged += async () =>
        {
            await InvokeAsync(() => StateHasChanged());
        };

    }


    [Parameter]
    public RenderFragment<DraggableItem> ChildContent { get; set; }

    [CascadingParameter] Dropzone Dropzone { get; set; }

    [Parameter]
    public dynamic Tag { get; set; }

    /// <summary>
    /// Allows to pass a delegate which determines if element can be dragged
    /// </summary>
    [Parameter]
    public Func<DraggableItem, bool> AllowDrag { get; set; }

    /// <summary>
    /// Get or sets a name for this draggable
    /// </summary>
    [Parameter]
    public string Name { get; set; }

}
